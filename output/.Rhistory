data = read.table("~/Desktop/AquaMaps_Invertebrates.csv", header=T, sep=",")
head(data)
cols = c("Genus_valid", "Species_valid")
data$GS = apply( data[ , cols ] , 1 , paste , collapse = "-" )
head(data)
data$GS = apply( data[ , cols ] , 1 , paste , collapse = "_" )
length(unique(data$GS))
hist(data$Probability)
hist(data$Probability, breaks(seq(0,1,0.001)))
hist(data$Probability, breaks=seq(0,1,0.001))
hist(data$Probability, breaks=seq(0,1,0.0001))
hist(data$Probability, breaks=seq(0,1,0.00001))
y = 2:20
t = cbind(x,y)
x = 1:10
y = 2:20
t = cbind(x,y)
View(t)
x = 1:10
y = 11:20
t = cbind(x,y)
t = as.data.frame(t)
paste(t$x, t$y, sep="_")
#set up data
data = data.frame(y=rnorm(100), x=rep(c("X, Y","Z","A"), 25))
length(rep(c("X, Y","Z","A"), 25))
rep(c("X, Y","Z","A"), 25)
#set up data
data = data.frame(y=rnorm(100), x=sample(c("X, Y","Z","A"), 100))
#set up data
data = data.frame(y=rnorm(100), x=sample(c("X, Y","Z","A"), replace=T, 100))
model.out = lm(y~x, data=data)
summary(model.out)
model.out = lm(y~x-1, data=data)
summary(model.out)
#set up data
data = data.frame(y=rnorm(100), x=sample(c("X", "Y","Z","A"), replace=T, 100))
model.out = lm(y~x-1, data=data)
summary(model.out)
ndata = data.frame(y=data$y, x=sample(data$x, replace=F, nrow(data)))
out = lm(y~x-1, data=ndata)
out$coefficients
summary(out)$coeffs
summary(out)$coeff
summary(out)$coeff
permvalues = NULL
for(i in 1:1000){
ndata = data.frame(y=data$y, x=sample(data$x, replace=F, nrow(data)))
out = lm(y~x-1, data=ndata)
permvalue = cbind(permvalue, summary(out)$coeff[,3])
}
permvalues = NULL
for(i in 1:1000){
ndata = data.frame(y=data$y, x=sample(data$x, replace=F, nrow(data)))
out = lm(y~x-1, data=ndata)
permvalues = cbind(permvalues, summary(out)$coeff[,3])
}
permvalues
head(permvalues)
dim(permvalues)
View(permvalues)
genos = matrix(nrow=1,ncol=100)
genos[,1] = sample(c(0,1),replace=T,100)
genos[1,] = sample(c(0,1),replace=T,100)
genos
genos[,seq(1,ncol(genos),2)]
genos[,seq(2,ncol(genos),2)]
genos[,seq(1,ncol(genos),2)]==genos[,seq(2,ncol(genos),2)]
genos[1,genos[,seq(1,ncol(genos),2)]==genos[,seq(2,ncol(genos),2)]]
length(genos[1,genos[,seq(1,ncol(genos),2)]==genos[,seq(2,ncol(genos),2)]])
seq(1,ncol(genos),2)
seq(2,ncol(genos),2)
genos[,seq(1,ncol(genos),2)]==genos[,seq(2,ncol(genos),2)]
View(data)
View(genos)
genos[1,genos[,seq(1,ncol(genos),2)]==genos[,seq(2,ncol(genos),2)]]
length(genos[,seq(1,ncol(genos),2)]==genos[,seq(2,ncol(genos),2)])
length(is.true(genos[,seq(1,ncol(genos),2)]==genos[,seq(2,ncol(genos),2)]))
sum(genos[,seq(1,ncol(genos),2)]==genos[,seq(2,ncol(genos),2)])
sum(genos[,seq(1,ncol(genos),2)]!=genos[,seq(2,ncol(genos),2)])
sum(genos[ ,seq(1,ncol(genos),2)]!=genos[,seq(2,ncol(genos),2)])/(ncol(genos)/2)
ncol(genos)/2
het = data.frame(y = seq(0,1,0.01), x = seq(0,1,0.01))
het
het$y = 1/het$y
plot(het$x, het$y)
plot(het$x, het$y, type="l")
lines(x=het$x, y=het$x)
lines(x=het$x, y=rev(het$x))
hist(het$y)
plot(het$x, het$y/100, type="l")
1/het$x
1/het$x/100
het$x
library(readxl)
library(psych)
log(.1)
exp(11.79)
.1872043-.1775987
0.0096056/2
Ne = 20
t = 1
1-(1-(1/Ne))^t
Ne = 100
t = 1
1-(1-(1/Ne))^t
Ne = 200
t = 1
1-(1-(1/Ne))^t
Ne = 100
t = 1
1-(1-(1/Ne))^t
Ne = 200
t = 1
1-(1-(1/Ne))^t
t = seq(1,10,1)
1-(1-(1/Ne))^t
Ft = function(Ne,t){
1-(1-(1/Ne))^t
}
Ne = 200
t = 1
Ft(Ne,t)
#set up F function
Ft = function(Ne,t){
1-(1-(1/Ne))^t
}
#test output
Ft(Ne=200,t=1)
#large popualtion
Ne200 = Ft(Ne=200,t)
t
#compare change over 10 generations
t = seq(1,10,1)
#large popualtion
Ne200 = Ft(Ne=200,t)
#small popualtion
Ne40 = Ft(Ne=40,t)
#plot comparison
plot(-100,-100, xlim=c(1,10), ylim=c(0,1), xlab="generation", ylab="inbreeding coefficient")
lines(x=t, y=Ne200, lty=1, lwd=2, col="dodgerblue3")
lines(x=t, y=Ne40, lty=1, lwd=2, col="firebrick3")
#very small popualtion
Ne4 = Ft(Ne=4,t)
lines(x=t, y=Ne4, lty=1, lwd=2, col="goldenrod3")
#What about a  long time?
t = seq(1,100,1)
Ne200 = Ft(Ne=200,t)
Ne40 = Ft(Ne=40,t)
Ne4 = Ft(Ne=4,t)
plot(-100,-100, xlim=c(1,100), ylim=c(0,1), xlab="generation", ylab="inbreeding coefficient")
lines(x=t, y=Ne200, lty=1, lwd=2, col="dodgerblue3")
lines(x=t, y=Ne40, lty=1, lwd=2, col="firebrick3")
lines(x=t, y=Ne4, lty=1, lwd=2, col="goldenrod3")
#set up F function
Ft = function(Ne,t){
1-(1-(1/Ne))^t
}
#test output
Ft(Ne=200,t=1)
#compare change over 10 generations
t = seq(1,10,1)
t
#large popualtion
Ne200 = Ft(Ne=200,t)
#small popualtion
Ne40 = Ft(Ne=40,t)
#plot comparison
plot(-100,-100, xlim=c(1,10), ylim=c(0,1), xlab="generation", ylab="inbreeding coefficient")
lines(x=t, y=Ne200, lty=1, lwd=2, col="dodgerblue3")
lines(x=t, y=Ne40, lty=1, lwd=2, col="firebrick3")
#What about a very small popualtion?
Ne4 = Ft(Ne=4,t)
lines(x=t, y=Ne4, lty=1, lwd=2, col="goldenrod3")
#What about a  long time?
t = seq(1,100,1)
Ne200 = Ft(Ne=200,t)
Ne40 = Ft(Ne=40,t)
Ne4 = Ft(Ne=4,t)
plot(-100,-100, xlim=c(1,100), ylim=c(0,1), xlab="generation", ylab="inbreeding coefficient")
lines(x=t, y=Ne200, lty=1, lwd=2, col="dodgerblue3")
lines(x=t, y=Ne40, lty=1, lwd=2, col="firebrick3")
lines(x=t, y=Ne4, lty=1, lwd=2, col="goldenrod3")
line = 52
favorite.win = 20
underdog.lose = 19
touchdown = 6
fieldgoal = 2
somethingelse = 1
#run some scores
OUT = NULL
prob.touchdown = 0.2
prob.fieldgoal = 0.5
prob.something = 0.1
points = sample(c(touchdown, fieldgoal, somethingelse, 0), pergame, replace = T, probs = c(prob.touchdown, prob.fieldgoal, prob.something))
c(touchdown, fieldgoal, somethingelse, 0)
?sample
points = sample(c(touchdown, fieldgoal, somethingelse, 0), size=pergame, replace = T, prob = c(prob.touchdown, prob.fieldgoal, prob.something))
#scoring parameters
pergame = 50
points = sample(c(touchdown, fieldgoal, somethingelse, 0), size=pergame, replace = T, prob = c(prob.touchdown, prob.fieldgoal, prob.something))
prob.touchdown = 0.2
prob.fieldgoal = 0.5
prob.something = 0.1
points = sample(c(touchdown, fieldgoal, somethingelse, 0), size=pergame, replace = T, prob = c(prob.touchdown, prob.fieldgoal, prob.something))
prob.nothing = 1 - sum(c(prob.touchdown, prob.fieldgoal, prob.something))
prob.nothing
prob.touchdown = 0.10
prob.fieldgoal = 0.25
prob.something = 0.05
prob.nothing = 1 - sum(c(prob.touchdown, prob.fieldgoal, prob.something))
points = sample(c(touchdown, fieldgoal, somethingelse, 0), size=pergame, replace = T, prob = c(prob.touchdown, prob.fieldgoal, prob.something))
points = sample(c(touchdown, fieldgoal, somethingelse, 0), size=pergame, replace = T, prob = c(prob.touchdown, prob.fieldgoal, prob.something, prob.nothing))
points
sum(points)
#run some scores
OUT = NULL
for(r in 1:replicates){
pointsF = sample(c(touchdown, fieldgoal, somethingelse, 0), size=pergame, replace = T, prob = c(prob.touchdown, prob.fieldgoal, prob.something, prob.nothing))
pointsU = sample(c(touchdown, fieldgoal, somethingelse, 0), size=pergame, replace = T, prob = c(prob.touchdown, prob.fieldgoal, prob.something, prob.nothing))
OUT = rbind(OUT, c(sum(pointsF), sum(pointsU)))
}
replicates = 100
#run some scores
OUT = NULL
for(r in 1:replicates){
pointsF = sample(c(touchdown, fieldgoal, somethingelse, 0), size=pergame, replace = T, prob = c(prob.touchdown, prob.fieldgoal, prob.something, prob.nothing))
pointsU = sample(c(touchdown, fieldgoal, somethingelse, 0), size=pergame, replace = T, prob = c(prob.touchdown, prob.fieldgoal, prob.something, prob.nothing))
OUT = rbind(OUT, c(sum(pointsF), sum(pointsU)))
}
OUT
points = data.frame(OUT)
points
#probabilities
#line
apply(points, 1, sum)
#probabilities
#line
(apply(points, 1, sum)[apply(points, 1, sum)<=line])/replicates
(apply(points, 1, sum)[apply(points, 1, sum)<=line])
#betting lines
line = 52
favorite.win = 20
underdog.lose = 19
#point scoring
touchdown = 6
fieldgoal = 2
somethingelse = 1
prob.touchdown = 0.05
prob.fieldgoal = 0.15
prob.something = 0.025
prob.nothing = 1 - sum(c(prob.touchdown, prob.fieldgoal, prob.something))
#scoring parameters
pergame = 50
replicates = 100
#run some scores
OUT = NULL
for(r in 1:replicates){
pointsF = sample(c(touchdown, fieldgoal, somethingelse, 0), size=pergame, replace = T, prob = c(prob.touchdown, prob.fieldgoal, prob.something, prob.nothing))
pointsU = sample(c(touchdown, fieldgoal, somethingelse, 0), size=pergame, replace = T, prob = c(prob.touchdown, prob.fieldgoal, prob.something, prob.nothing))
OUT = rbind(OUT, c(sum(pointsF), sum(pointsU)))
}
points = data.frame(OUT)
#probabilities
#line
(apply(points, 1, sum)[apply(points, 1, sum)<=line])/replicates
(apply(points, 1, sum)[apply(points, 1, sum)<=line])
#probabilities
#line
(length(apply(points, 1, sum)[apply(points, 1, sum)<=line]))/replicates
#probabilities
#line
lineout = (length(apply(points, 1, sum)[apply(points, 1, sum)<=line]))/replicates
lineout*100
paste(lineout*100, "% of the time score will be under the line", sep="")
colnames(points) = c("favorite", "underdog")
points[points$favorite<=(points$underdog+favorite.win)]
colnames(points) = c("favorite", "underdog")
points[points$favorite<=(points$underdog+favorite.win)]
points[points$favorite<=(points$underdog+favorite.win),]
points$favorite
points$diff = points$favorite - points$under
points$diff = points$favorite - points$underdog
points$diff
points[points$diff >= favorite.win,]
favwin = nrow(points[points$diff >= favorite.win,])/nrow(points)
favwin
?seq
length(Lob$age==15)>=1
?rm
changeNB = rnorm(100, mean=0, sd=0.2)
changeKS = rnorm(100, mean=0, sd=0.2)
plot(changeNB, changeKS)
changeNB = rnorm(100, mean=0, sd=0.2)
changeKS = rnorm(100, mean=0, sd=0.5)
plot(changeNB, changeKS)
changeNB = sample(seq(-0.2, 0.15, 0.01), 100, replace=T)
changeNB = changeNB[order(changeNB)]
changeNB
changeKS = sample(seq(-0.5, 0.5, 0.01), 100, replace=T)
plot(changeNB, changeKS)
changeKS
changeKS = changeKS[order(changeKS)]
plot(changeNB, changeKS)
changeKS = rev(changeKS[order(changeKS)])
plot(changeNB, changeKS)
changeNB = sample(seq(-0.2, 0.15, 0.01), 500, replace=T)
changeNB = changeNB[order(changeNB)]
changeKS = sample(seq(-0.5, 0.5, 0.01), 500, replace=T)
changeKS = rev(changeKS[order(changeKS)])
plot(changeNB, changeKS)
plot(changeNB, jitter(changeKS, 0.05))
plot(changeNB, jitter(changeKS, 0.1))
jitter(changeKS, 0.1)
jitter(changeKS, 0.1)
plot(changeNB, jitter(changeKS, 1))
plot(changeNB, jitter(changeKS, 10))
plot(changeNB, jitter(changeKS, 25))
plot(jitter(changeNB, 25), jitter(changeKS, 25))
changeNB = sample(seq(-0.2, 0.15, 0.01), 250, replace=T)
changeNB = changeNB[order(changeNB)]
changeKS = sample(seq(-0.5, 0.5, 0.01), 250, replace=T)
changeKS = rev(changeKS[order(changeKS)])
plot(jitter(changeNB, 25), jitter(changeKS, 25))
plot(jitter(changeNB, 25), jitter(changeKS, 25), xlim=c(-0.25,0.25), ylim=c(-.5,.5))
plot(jitter(changeNB, 25), jitter(changeKS, 25), xlim=c(-0.25,0.25), ylim=c(-.6,.6))
plot(jitter(changeNB, 25), jitter(changeKS, 25), xlim=c(-0.25,0.25), ylim=c(-.6,.6), pch=19, col="dodgerblue3")
plot(jitter(changeNB, 25), jitter(changeKS, 25), xlim=c(-0.25,0.25), ylim=c(-.6,.6), pch=19, bg="dodgerblue3", col="black")
plot(jitter(changeNB, 25), jitter(changeKS, 25), xlim=c(-0.25,0.25), ylim=c(-.6,.6), pch=21, bg="dodgerblue3", col="black")
plot(jitter(changeNB, 25), jitter(changeKS, 25), xlim=c(-0.25,0.25), ylim=c(-.6,.6), pch=21, bg="dodgerblue3", col="black", xlab="% change heterozygosity in Nebraska", ylab="% change heterozygosity in Kansas")
changeNB = sample(seq(-0.2, 0.15, 0.01), 250, replace=T)
changeNB = changeNB[order(changeNB)]
changeKS = sample(seq(-0.4, 0.4, 0.01), 250, replace=T)
changeKS = rev(changeKS[order(changeKS)])
plot(jitter(changeNB, 25), jitter(changeKS, 25), xlim=c(-0.25,0.25), ylim=c(-.6,.6), pch=21, bg="firebrick3", col="black", xlab="% change heterozygosity in South Dakota", ylab="% change heterozygosity in Kansas")
library(googlesheets4)
library(gargle)
library(scales)
library(lme4)
#setwd("/Users/jannawilloughby/Google Drive/My Drive/loot/Bookclub/bookclub_ratings/output/")
setwd("/Users/jrw0107/Google Drive/My Drive/loot/Bookclub/bookclub_ratings/output/")
####setup####
#requires tidyverse install and google sheets integration api, or public sheet
gs4_deauth()
data = read_sheet("https://docs.google.com/spreadsheets/d/1oBncOH7I_-keah3mvgpzcTlXhP95vR2SRa6gBlWSd2Y/edit?resourcekey#gid=216442974")
data = as.data.frame(data)
colnames(data) = c("date", "book", "rating", "reader")
meta = read_sheet("https://docs.google.com/spreadsheets/d/1icRZXs63DR6EpW29qzdWFn87jUF0HkJeY-ABaxIX9tQ/edit#gid=0")
meta = as.data.frame(meta)
colnames(meta) = c("book", "short", "reader", "month", "year", "author", "gender")
books = unique(data$book)
readers = sort(unique(data$reader))
colors=c("darkorange1", "firebrick3", "chartreuse3", "dodgerblue3","darkorchid3")
#remove duplicated ratings
newlist = NULL
for(i in 1:length(readers)){
temp    = data[data$reader==readers[i],,drop=F]
revbook = unique(temp$book)
for(tt in 1:length(revbook)){
x = temp[temp$book==as.character(revbook[tt]),,drop=F]
if(nrow(x)==1){
trow = x
}else{
trow = x[x$date==max(x$date),,drop=F]
}
newlist = rbind(newlist, trow)
}
}
data = as.data.frame(newlist)
#calculate median rating for each book
ratings = data.frame(books = books, short = rep(NA, length(books)), median = rep(NA, length(books)),mean = rep(NA, length(books)), min = rep(NA, length(books)), max = rep(NA, length(books)))
for(b in 1:length(books)){
temp = data[data$book==as.character(books[b]),,drop=F]
ratings$median[b] = median(temp$rating, na.rm=T)
ratings$mean[b]   = mean(temp$rating, na.rm=T)
ratings$min[b]    = min(temp$rating, na.rm=T)
ratings$max[b]    = max(temp$rating, na.rm=T)
ratings$short[b]  = meta$short[meta$book==books[b]]
}
ratings$seq=seq(1,nrow(ratings),1)
par(mar = c(5, 5, 2, 5), xpd=T)
plot(-100,-100, xlim=c(0.25,(nrow(ratings)+0.25)), ylim=c(0.75,10), xlab="", ylab="", axes=F)
axis(side=1, at=seq(1,nrow(ratings),1), labels=F, pos=0.75)
text(x = 1:length(ratings$short), y = par("usr")[3] - 0.05, labels = ratings$short,xpd = NA,srt = 35,adj = 0.965,cex = .8)
segments(x0=0, x1=0.25+nrow(ratings), y0=0.75, y1=0.75)
axis(side=2, at=seq(1,10,1), labels=T)
text(x=-2, y=5.5, labels = "ratings", xpd = NA, cex = 1.2, srt = 90)
p=1
for(b in 1:length(books)){
if(p==1){
polygon(x=c(b-.45, b+.45, b+.45, b-.45), y=c(0.95,0.95,10.1,10.1), col="grey95", border=NA)
p=0
next
}
if(p==0){
p=1
}
}
for(b in 1:length(books)){
temp = data[data$book==as.character(books[b]),,drop=F]
for(p in 1:length(readers)){
r = temp[temp$reader==readers[p],,drop=F]
if(nrow(r)==0){next}
if(nrow(r)>0){
points(jitter(b, 1), r$rating, pch=21, col=alpha(colors[p],1), bg=alpha(colors[p],0.5), cex=1.5)
}
}
segments(x0=(b-0.25), x1=(b+0.25), y0=ratings$median[b], y1=ratings$median[b], lwd=1.5)
}
legend(x=length(books)+1,y=4, legend=readers, col=alpha(colors,0.5), pch=19, bg=NA, pt.bg=alpha(colors,0.5), cex=0.8, bty="n")
par(mar = c(5, 5, 2, 5), xpd=T)
plot(-100,-100, xlim=c(0.25,(nrow(ratings)+0.25)), ylim=c(0.75,10), xlab="", ylab="", axes=F)
axis(side=1, at=seq(1,nrow(ratings),1), labels=F, pos=0.75)
text(x = 1:length(ratings$short), y = par("usr")[3] - 0.05, labels = ratings$short,xpd = NA,srt = 35,adj = 0.965,cex = .8)
segments(x0=0, x1=0.25+nrow(ratings), y0=0.75, y1=0.75)
axis(side=2, at=seq(1,10,1), labels=T)
text(x=-2, y=5.5, labels = "ratings", xpd = NA, cex = 1.2, srt = 90)
p=1
for(b in 1:length(books)){
if(p==1){
polygon(x=c(b-.45, b+.45, b+.45, b-.45), y=c(0.95,0.95,10.1,10.1), col="grey95", border=NA)
p=0
next
}
if(p==0){
p=1
}
}
for(b in 1:length(books)){
temp = data[data$book==as.character(books[b]),,drop=F]
for(p in 1:length(readers)){
r = temp[temp$reader==readers[p],,drop=F]
if(nrow(r)==0){next}
if(nrow(r)>0){
points(jitter(b,0.75), r$rating, pch=21, col=alpha(colors[p],1), bg=alpha(colors[p],0.5), cex=1.5)
}
}
segments(x0=(b-0.25), x1=(b+0.25), y0=ratings$median[b], y1=ratings$median[b], lwd=1.5)
}
legend(x=length(books)+1,y=4, legend=readers, col=alpha(colors,0.5), pch=19, bg=NA, pt.bg=alpha(colors,0.5), cex=0.8, bty="n")
#####plot some shit -- by book####
jpeg("medianscores.jpg", width=680, height=480)
par(mar = c(5, 5, 2, 5), xpd=T)
plot(-100,-100, xlim=c(0.25,(nrow(ratings)+0.25)), ylim=c(0.75,10), xlab="", ylab="", axes=F)
axis(side=1, at=seq(1,nrow(ratings),1), labels=F, pos=0.75)
text(x = 1:length(ratings$short), y = par("usr")[3] - 0.05, labels = ratings$short,xpd = NA,srt = 35,adj = 0.965,cex = .8)
segments(x0=0, x1=0.25+nrow(ratings), y0=0.75, y1=0.75)
axis(side=2, at=seq(1,10,1), labels=T)
text(x=-2, y=5.5, labels = "ratings", xpd = NA, cex = 1.2, srt = 90)
p=1
for(b in 1:length(books)){
if(p==1){
polygon(x=c(b-.45, b+.45, b+.45, b-.45), y=c(0.95,0.95,10.1,10.1), col="grey95", border=NA)
p=0
next
}
if(p==0){
p=1
}
}
for(b in 1:length(books)){
temp = data[data$book==as.character(books[b]),,drop=F]
for(p in 1:length(readers)){
r = temp[temp$reader==readers[p],,drop=F]
if(nrow(r)==0){next}
if(nrow(r)>0){
points(jitter(b,0.75), r$rating, pch=21, col=alpha(colors[p],1), bg=alpha(colors[p],0.5), cex=1.5)
}
}
segments(x0=(b-0.25), x1=(b+0.25), y0=ratings$median[b], y1=ratings$median[b], lwd=1.5)
}
legend(x=length(books)+1,y=4, legend=readers, col=alpha(colors,0.5), pch=19, bg=NA, pt.bg=alpha(colors,0.5), cex=0.8, bty="n")
dev.off()
